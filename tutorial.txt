RESTAPIs

1: npm init -y

2: npm install express body-parser

3: index.js

4: cria um servidor em index.js importare express, body-parser mandar uma rota app.get com dados products pra testar

5: usar o insomina pra consumir os dados

6: mandar um app.get depois consumir no insominia pra ver se retorna os dados

7: mandar um app.post com o res req.body depois mandar no insomnia um post com dados em JSON pra retornar o req.body

8: criar routes/productsRouter.js para as rotas 

9: criar controllers/productsController.js para os controllers

10: OBS: criar  routes/index.js pra que todas as rotas criadas na pasta routes passe e carregue nele primeiro antes de ser mandado pra main index.js ou seja ele vai importar todos os arquivos router pra em seguida mandar pra main index.js p´ra ser carregado

11:1. conttrollers faz a lógica e manda pra o arquivo.router.js na pasta routes  2.o arquivo.router.js uni a lógica com a rota e manda pra routes/index.js  3.routes/index.js carrega todas as rotas com os controllers e manda pra main index.jjs 

12: PASSANDO A ROTA BASE EM ROUTES/INDEX.JS NÃO PRECISA DECLARAR ELA EM ROUTES/ARQUIVOROUTER.JS ex: routes/index.js: router.use('/products', products)
arquivoRoter.js: router.delete('/:id',productsController.remove ) '/' ou '/:id' SE UM DIA PRECISAR ALTERAR BASTA ALTERAR O CAMPO EM ROUTES/INDEX.JS 

GRAPHQL
1: npm install apollo-server-express

2: em main index.js importar apollo-server-express e o gql

TYPEDEFS
3: criar o typeDefs = gql `` com os types , Com type Query: que traz a consulta dos dados declarados, type Product que é o modelo pra ser inserido na type Query, o type Mutation que faz a manipulção dos dados o input ProductInput que é o modelo pra ser inserido no type Mutation

4: No resolvers criar a Query com a lógica pra buscar os dados  e o Mutation com a lógica pra manipular os dados, o typedefs e o Mutation trabalham em sintonia

5:Criar graphql/index.js  e importar typedefs e resolvers e o import do apollo depois importar em main index.js o graphqlServer

6: criar graphql/schema.graphql e tranferir conteúdo de typedefs pra lá, importar o FS e o path e usar ambos pra unir o __dirname com o arquivo schema.graphql. pois só vai importar dessa forma

7: criar resolvers/index.js e products.js  dentro da pasta graphqltranferir o conteudo resolvers pra lá em seguida importa resolvers pra graphql/index.js novamente

8: Em resolvers/inde.js desaclopamos tampbem a função de resolvers e mandamos pra resolvers/products.js em seguida importamos de volta pra o resolvers/index.js

LINKAR COM BANCO DE DADOS SQL

1: npm install msql2

2: criar migrations/1.js e por as migrations do projeto bancod de dados pra facilitar

3: criar migration.js na raiz 

4: executar o XAMPP e executar o migration.js no terminal pra testar

5: criar models/product.js e add o models de criação de produtos dentro 

6:no controllers/productControllers importar o models/product.js e o db.js vincular o db.js ao product.js no import no topo do arquivo

LINKAR FINDALL NO GET
7: em seguida tranforafamr o getAll em async e chamr o product.findAll() pra qunado fizer a requisição do insomina retornar os product do banci de dados

LINKAR O CREATE NO POST
8: em controllers/productControllers.js tornar o create async, abstrair o product e o price e chamar o await product.create([produc,price])

LINKA O REMOVE COM O DELETE 
9:em controllers/productControllers.js deixar o remove async e dar um await Product.remoce(req.params.id) pra apagar o objeto cujo o id foi passado na url

LINKAR UPDATE AO PUT 
10:em controllers/productControllers.js tornar o put async em seguida abstrair  o product e price depois passar o await com o model Product.update usando os dois parametros da assinatura o id que é: req.params.id que vai na URL, e o data que é o: [product, price]

CRIAR E LINKAR FINDBYID
11: em models/products criar o findById e pssar o parâmetro (id) pra busca do id ser dinãmica
12:em controllers/productControllers.js toranr getById async e buscar com resultado por id com: o model Product.findById(req.params.id)

LINKAR UPDATE AO PATCH
13: em controllers/productControllers.js deixar o patch async passar ums const oldProduct pra buscar o product por req.paras.id, em seguida fazer duas condicionais pra mudar o product e o price old para atual dinamicamente na consulta e por ultimo dar um await Product.update

PEGAR PRODUTOS E ATUALIZAR POR CATEGORIAS
14:em controllers/productControllers.js no getAll() criar uma condicional no qualse houver categoria ele retorna produtos por categoria se não houver ele apenas retorna todos os produtos pra buscar categoria via URL: http://localhost:3000/products?categoryId=10

15:em controllers/productControllers.js no patch usei uma condicinal pra caso não haja oldProducty mandar uma mensagem, em seguidaudei o model updateCategories pra criar categorias dinamicamente na requisição

REST GERENCIAR IMAGENS
16: criar em routes/productsRouter.js uma nova rota POST IMAGES chamando a função createImage

17: em controllers/productControllers.js criar o createImage() descontruindo o description e o url da req.body em seguida utilizando o model addImage  passando o ID do produto seguido da description e url

18: em models/product.js criar o removeImage() com os parametros product_id e imageId em seguida em routes/productsRouter.js criar a rota.delete e por ultimo criar em controllers/productControllers.js o removeImage() com req.params.productId, req.params.id nos paramentros pra serem deletados 

OBS: PRA MANIPULAR OBJETOS EM REST SE RESUME UNIR EM CONTROLLERS/PRODUCTCONTROLLERS.JS O ARQUIVO MODELS/PRODUCS.JS, DB.JS E PASSAR PRA ROUTES/PRODUCTrOUTER.JS

GRAPHQL GetAllProducts
1:Em schema.graphql criar filter com getallProducts em seguida criar input productFIlter pra anexar na Query e no type Product por product e price ou seja por valores correpondentes ao conteudo do banco de dados

2: depois em resolvers/products.js importar o db e o models/product em seguida no getAllProducts inserir condicinal de filtragem por categoria pra retornar produtos listados na categoria ou retornar todos os produtos

GRAPHQL CREATE PRODUCT
3:em schema.graphql define o model do objeto a ser craido, em seguida em resolvers/products.js passar a função createProduct linkada ao models/Product
pra que  o produto seja criado no apolloserver  OBS: não esquecer de passar a função por resolvers/index.js

GRAPHQL DELETE PRODUCT

4:em schema/graphql criar a mutation deleteProduct, em seguida em resolvers/products.js criar o deleteProduct  co a função remove vinda de models/product.js  OBS: não esquecer de passar a função por resolvers/index.js

GRAPHQL UPDATE PRODUCT

5::em schema/graphql criar a mutation updateProduct,e o input ProductUpdateInput com os párametros de tipagem dos objetos,  em seguida em resolvers/products.js criar o updateProduct e passar no resolvers/index.js em seguida mapear no resolvers/index.js OBS: deixar  o ID do lado de fora(no Mutation) e obrigatório"!" 
6: importar o ApooloError de apollo-server-express pra passar o retorno do error as condicionias sempre serão com input defernete de REST que eram com req.body
OBS: QUNADO O OBJETO FOR OBRIGATORIAMENTE LIGADO AO ID PASSAR O ID FORA DO TYPE E SIM DENTRO DA PRÓPRIA Mutation

GRAPHQL IMAGES

7: em schema/graphql criar a mutation createImageOnProduct com o ID fora(na Mutation) e obrigatorio, e criar o input imageInput e passar depois an createImageOnProduct, emn seguida em resolvers/products.js criar e exportar createImageOnProduct e por ultimo mapear em resolvers/index.js

8:OBS: defini em resolvers;schema.graphql no type Product add image: Image pra retornar na consulta

GRAPHQL DELETE IMAGES    
9: em schema/graphql criar a mutation deleteImageOnProduct passanos o productId, id no parãmetro, em seguida em resolvers/product.js criar o deleteImageOnProduct com a funnçao do models/Product removeImage, e por ultimo mapear a fnução em resolvers/index.js







OBS: PRA CRIAR OBJETO NO GRAPGHQL SE RESUMIR UNIR EM CRIAR O OBJETO EM SCHEMA.GRAPHQL DEPOIS CRIAR A FUNÇÃO RESOLVER/PRODUCT.JS COM OS PARÃMETROS DE ARQUIVOS MODELS/PRODUCTS.JS, DB.JS E 






JWT 
10: npm install jsonwebtoken

11:criar poc-jwt.js

12: criar routes/authRouter.js e passar a rota post com um /login, em seguida mapear a rota em routes/index.js para seram manda por padrão pra main index.js

13: criar controllers/authControllers.js  passar users e cham,r em authControllers

14: em seguida start mysql DB e chamr no insominia

15: criar uma condicional em auth verificando se o usuário existe, se existir executar o token dentro do bloc e retornra o token se as credencials forem certas ou um amensagem de erro se for errada

OBS: passar no insominia em headers o Bearer e o authentication

16: Em controllers/productControllers.js passa uma condicional nas operações de CRUD, atrelando req.headers.authorizations